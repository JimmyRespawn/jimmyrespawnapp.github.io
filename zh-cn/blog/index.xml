<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>墨菲纳米 – 博客</title>
    <link>https://app.linjimi.com/zh-cn/blog/</link>
    <description>Recent content in 博客 on 墨菲纳米</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	  <atom:link href="https://app.linjimi.com/zh-cn/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>记 UWP 应用迁移 WinUI3 架构踩的坑</title>
      <link>https://app.linjimi.com/zh-cn/blog/uwptowinui3devlog1/</link>
      <pubDate>Sat, 25 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://app.linjimi.com/zh-cn/blog/uwptowinui3devlog1/</guid>
      <description>
        
        
        &lt;p&gt;最近因为 bug 不得不暂时进行一次 UWP 中型项目的迁移至 WinUI3 架构，耗时两天，大约 20-30 小时。结果原来 UWP 版的 bug 在 UI3 刚发布两小时不到就有解决方案了，迁移后的项目只能作为备选了。&lt;/p&gt;
&lt;h2&gt;优点&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;优点&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;方便的单独打包和侧载，可以非常方便按 exe 发布刚打完的包，和传统 Win 应用一样。&lt;/li&gt;
&lt;li&gt;丰富强大的社区库，虽然现在其他平台的库也很丰富，不过 .net 库的强大不用说了。&lt;/li&gt;
&lt;li&gt;后续 MS 的支持，WinAPPSDK还在更新， 后续还有更多的 API 和 AI 的功能支持。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;遇到开发中的坑&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;遇到开发中的坑&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e9%81%87%e5%88%b0%e5%bc%80%e5%8f%91%e4%b8%ad%e7%9a%84%e5%9d%91&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;以下问题仅代表本文章发布时在 WinUI3 遇到的问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发布文件生成失败：store关联StoreAssociation.xml文件生成失败，导致打包失败，失败提示网上根本搜不到，老项目的关联文件贴过来就能用了。&lt;/li&gt;
&lt;li&gt;发布包不启动：打完的包启动就闪退，这个问题之前也遇到过，原因是引用了CommunityToolkit的Uno WinU3包，这个问题不会出现在 debug 和 release，只会打完包，然后根本不启动exe，WinUI3 经常遇到类似引的包，导致整个项目启都启不起来，但是 debug 又没事，定位问题困难。&lt;/li&gt;
&lt;li&gt;发布包部分功能不执行：WinAppSDK1.6默认新加了功能 aot，不说原理，效果就是会裁剪包，让安装包大小小很多，并且启动速度和.net native也就是uwp媲美，但是这个code裁剪目前对于我这个稀烂的程序员，里面代码要求比较严格，会裁剪掉本来就要用的代码块。所以又是和2类似的问题，你debug根本看不出问题，打完包又发现列表绑定失效等等。经过几小时的搜索，通过 AllowUnsafeBlocks + TrimMode改成partial + PublishAot改成false，发布包终于正常了。&lt;/li&gt;
&lt;li&gt;生成包语言只有默认：x-generate不生效，只有进 Package.appxmanifest 里面把所有要生成 Resource 的包的语言一个个加上才生成。&lt;/li&gt;
&lt;li&gt;部分 API 变更：情理之中，但有时候一样的功能，代码改动太大了，原来的代码复用性不高，就改的比较麻，印象深刻是一个ResourceLoader，还有一个是弹窗要定 XamlRoot。&lt;/li&gt;
&lt;li&gt;CsWinRT和Win32代码混用： 当然也可能是老 UWP 项目迁移的问题，就有时候用 Win32 本地的 dll，比较像一块电路板原来像UWP一样必须要规规矩矩设计，突然有些功能非常狂野，一根线就飞过去，飞来飞去。但是功能也的确实现了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;UWP与Win32较量中的利与弊&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;uwp与win32较量中的利与弊&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#uwp%e4%b8%8ewin32%e8%be%83%e9%87%8f%e4%b8%ad%e7%9a%84%e5%88%a9%e4%b8%8e%e5%bc%8a&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这里抛开平台之间的较量，这时候肯定有读者说，不会吧不会吧，5202年还有 .net 开发者吧。&lt;/p&gt;
&lt;h3&gt;Win32利与UWP弊&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;win32利与uwp弊&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#win32%e5%88%a9%e4%b8%8euwp%e5%bc%8a&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;底层 API 代码支持：UWP发布之日，当时沙盒那套安全性的确挺火，不少大厂趋之若鹜。但是牺牲的底层功能的支持，例如一个简单的让电脑开关机， UWP不靠XamlIsland这辈子都不可能实现。所以UWP就怕的是突然有一天你需要底层代码去实现一些业务功能。&lt;/li&gt;
&lt;li&gt;无视Lifecycle ：基于跨平台和性能的要求，UWP在进入后台（缩小），关闭等之后，必须严格遵守Lifecycle，不然就会被部分平台的系统干掉后台，WP算好了，XBOX只要你一超过128M，就直接杀掉后台。这也是为什么Spotify等音乐软件，每次进后台，再切回来，所有前端页面要重新渲染，因为Spotify前端的一些大图，绝对可以撑爆128M。&lt;/li&gt;
&lt;li&gt;美好的未来：持续支持新的 .net c# 特性，不过还是要看具体业务。就像那些老应用还在 WinForm 和 WPF 一样，这的确也是微软强大之处，新系统无敌的向前兼容，不去讨论苹果那套不支持 x64 就滚下架，不适配就下架的逻辑，强如谷歌，其实安卓该强硬的让一些应用更新，也还是可以在新版本不支持老应用。虽然这几年新的微软开发架构不支持老系统，但所有老系统的应用还是支持新系统。扯远了，WinAPPSDK月底就会发新的 AI Feature，靠这些功能的确能整出些花活。其实老框架也能支持新的热点功能，例如 VLC 就支持 Whisper 搞实时翻译，不过 WinUI3 这种新框架的确对于个人友好很多。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;UWP利与WinUI3弊&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;uwp利与winui3弊&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#uwp%e5%88%a9%e4%b8%8ewinui3%e5%bc%8a&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;无敌的内存管理：其实较为复杂的应用还是可以维持在 100M 左右的前台内存占用，并且页面间跳转与内存回收极其精准快速，跑在低端机上毫无问题。无论是视频解码、音频播放，在线浏览之类，这也是为什么 UWP 始终有一定量钉子户和粉丝的原因，网易和腾讯把 Win32 应用在商店强制替换 UWP ，今天还有人骂。&lt;/li&gt;
&lt;li&gt;安全性：其实这是个悖论，就如上面谈 Win32 的好的时候，UWP 不会扫描你的硬盘，UWP 没法后台跑一些骚操作，没法在你不同意的情况下获得一些权限。极致的安全性给开发者带来的不便和用户的体验提升，中间的博弈似乎本来就是悖论。&lt;/li&gt;
&lt;li&gt;界面：其实这不能算WinUI3的弊，毕竟他叫UI3,但是界面好看程度在Win上目前的确是 UWP 的 WinUI2.8&amp;gt;WinUI3&amp;gt;其他。当然也有一些强无敌的开发者Directx+老框架也能做出好看的界面。但是你让一个新上手的开发者，想做出一个好看的界面，的确就是装个WinUI库，好了，你拥有桌面端个人认为最漂亮的材质。（审美喜好都有不同，不必争论，有异议就是你对）&lt;/li&gt;
&lt;li&gt;跨平台：UWP 的名字里带有 Universal 就意味着这个框架生来是跨平台，从WP(aka Win10m)、Hololens、Xbox、桌面、平板，UWP具备完善的手柄、触摸、鼠标、键盘导航，对accessibility也是相较以往质的提升。这个框架跨平台的理念早就在2017年甩苹果当时的跨平台开发理念，结果UWP-&amp;gt;WinUI3几乎放弃了跨平台，今天苹果开始越来越对VisionPro、iPad、Mac、iPhone、手表的跨平台框架支持越来越好。当然这也和微软逐步退出MR、手机等领域有关，不过这玩意儿就是，不持续投入，后续可能再也没有进入这个市场的机会了，就和 Windows Phone 一样。&lt;/li&gt;
&lt;li&gt;VS Deisnger View：终于到了我们开发者喜闻乐见的环节，所有框架，抛开诡异的Xamarin和Maui，UWP非常完美支持 Visual Studio 的 Deisnger View，甚至能在代码写的比较完善的情况下，渲染出后端代码中绑定的真实数据，只能说说强如微软。结果 WinUI3 猜猜怎么样，砍掉了，半年前答应加回来，现在还没上。现在距离 WinUI3 发布应该已经3年多了。&lt;/li&gt;
&lt;li&gt;极致的性能：和第一点类似，基于 .net native 加持，现在可以宣布，Win平台不可能有比 UWP 启动速度更快的应用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;后记&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;后记&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%90%8e%e8%ae%b0&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;能憋着看到现在一定是微软old ass，现在有些人上来就说我觉得ms这套框架就是不行，就是DOA。那我还是要说，你先看看自己能做到什么，你要是敲了两行hello world，或者做了两个功能就开始骂街，那我只能说强者不会抱怨环境。你去 iOS、安卓或者linux开发，照样也是没几个人用你的软件服务，下载量能到几十W甚至几W么，用户日活多少，或者你说你是技术爱好者，不是产品专家。那没问题，你在 Github 的开源库有几个 star，在哪个平台社区贡献几何。难如汇编，大佬都给你搞出一个过山车大亨。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>从 Tumblr 迁移至 Hugo</title>
      <link>https://app.linjimi.com/zh-cn/blog/markdown/</link>
      <pubDate>Mon, 12 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://app.linjimi.com/zh-cn/blog/markdown/</guid>
      <description>
        
        
        &lt;p&gt;本网站现已使用 Hugo 作为引擎.&lt;/p&gt;
&lt;p&gt;主题为 Hextra 并且进行了点点魔改。&lt;/p&gt;
&lt;p&gt;现在为新用户提供更详尽的产品信息和文档。另外，还会持续提供更多功能与修复。&lt;/p&gt;
&lt;p&gt;祝健康安好。&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Echo for Stage1st 最终用户许可协议</title>
      <link>https://app.linjimi.com/private/169329891432/tumblr_p22bjwTap01unlq99/</link>
      <pubDate>Fri, 05 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://app.linjimi.com/private/169329891432/tumblr_p22bjwTap01unlq99/</guid>
      <description>
        
        
        &lt;ol&gt;
&lt;li&gt;请遵守 &lt;a href=&#34;https://bbs.saraba1st.com/2b/forum.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bbs.saraba1st.com&lt;/a&gt; 论坛的服务条款。&lt;/li&gt;
&lt;li&gt;用户在使用本应用的过程中应文明发言，并依法尊重其它用户的人格权与身份权等人身权利，共同建立和谐、文明、礼貌的网络社交环境。&lt;/li&gt;
&lt;li&gt;用户获得了使用该软件的权利，并且可以将该软件推荐给其他人，但是不允许再收费分发该软件。&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Echo for Stage1st隐私策略</title>
      <link>https://app.linjimi.com/private/168073230752/tumblr_p09xgjg9jK1unlq99/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://app.linjimi.com/private/168073230752/tumblr_p09xgjg9jK1unlq99/</guid>
      <description>
        
        
        &lt;p&gt;Echo for Stage1st（之后简称该应用）使用你的网络下载和上传内容。该应用不收集、使用任何个人信息，不存储个人资料或者将个人资料分享给第三方。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们使用 Visual Studio Application Insights 来跟踪应用的使用情况，定位 Bug ，和修复崩溃。所有信息向服务器以匿名方式发送，并且不包括任何用户的个人资料。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
