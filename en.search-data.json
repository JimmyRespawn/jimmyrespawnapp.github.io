{"/about/":{"data":{"":"","credits#Credits":"Our vision is to build the best native app experience on Windows and Xbox platform which adopts the latest technology provided by MSFT.\nTo support the projects via ‚ë† sharing the apps to community, ‚ë° purchasing Pro version and ‚ë¢ leaving 5-star ratings in the store.\nTo follow the app development updates, we will soon open a Telegram announcement channel.\nCredits\rApps cannot be built without the following tools and inspirations:\nJson.NET WinUI 2.8 Windows Community Toolkit LibVLCSharp FFmpeg Html2Markdown Hugo "},"title":"About"},"/blog/":{"data":{"":"\rRSS Feed "},"title":"Blog"},"/docs/":{"data":{"":"","features#Features":"","next#Next":"üëã Hello! Welcome to the JimmyRespawn documentation!\nWhat is JimmyRespawn?\rJimmyRespawn is a software publisher dedicated to delivering high-quality native apps. for the Windows and Xbox platforms, leveraging the latest Microsoft technologies to enhance user experiences.\nFeatures\rBeautiful Design - Inspired by Fluent guideline to offer a modern design that makes app look outstanding. Responsive Layout and Dark Mode - It looks great on all devices, from Xbox, tablet to desktop. Dark mode is also supported to accommodate various lighting conditions. Fast and Lightweight - Powered by UWP, a lightning-fast software infrastructure built with .Net native, JimmyRespawn keeps its footprint minimal. No extra EXE installation are needed to use it. Multi-language - Multi-language apps made easy with JimmyRespawn‚Äôs multilingual mode. Questions or Feedback?\r‚ùì\rJimmyRespawn‚Äôs apps are still in active development. Have a question or feedback? Feel free to open an issue!\rNext\rDive right into the following section to get started:\nGetting StartedLearn how to download apps using Store","questions-or-feedback#Questions or Feedback?":"","what-is-jimmyrespawn#What is JimmyRespawn?":""},"title":"Documentation"},"/docs/advanced/":{"data":{"":"This section covers some advanced topics of the theme.\nMulti-language\rCustomization\rComments System"},"title":"Advanced"},"/docs/advanced/comments/":{"data":{"":"","giscus#giscus":"Hextra supports adding comments system to your site. Currently giscus is supported.\ngiscus\rgiscus is a comments system powered by GitHub Discussions. It is free and open source.\nTo enable giscus, you need to add the following to the site configuration file:\nhugo.yamlparams: comments: enable: false type: giscus giscus: repo: \u003crepository\u003e repoId: \u003crepository ID\u003e category: \u003ccategory\u003e categoryId: \u003ccategory ID\u003e\rThe giscus configurations can be constructed from the giscus.app website. More details can also be found there.\nComments can be enabled or disabled for a specific page in the page front matter:\ncontent/docs/about.md--- title: About comments: true ---"},"title":"Comments"},"/docs/advanced/customization/":{"data":{"":"","custom-css#Custom CSS":"","custom-layouts#Custom Layouts":"","custom-scripts#Custom Scripts":"","further-customization#Further Customization":"Hextra offers some default customization options in the hugo.yaml config file to configure the theme. This page describes the available options and how to customize the theme further.\nCustom CSS\rTo add custom CSS, we need to create a file assets/css/custom.css in our site. Hextra will automatically load this file.\nFont Family\rThe font family of the content can be customized using:\nassets/css/custom.css.content { font-family: \"Times New Roman\", Times, serif; }\rInline Code Element\rThe color of text mixed with other text can customized with:\nassets/css/custom.css.content code:not(.code-block code) { color: #c97c2e; }\rPrimary Color\rThe primary color of the theme can be customized by setting the --primary-hue and --primary-saturation variables:\nassets/css/custom.css:root { --primary-hue: 100deg; --primary-saturation: 90%; }\rSyntax Highlighting\rList of available syntax highlighting themes are available at Chroma Styles Gallery. The stylesheet can be generated using the command:\nhugo gen chromastyles --style=github\rTo override the default syntax highlighting theme, we can add the generated styles to the custom CSS file.\nCustom Scripts\rYou may add custom scripts to the end of the head for every page by adding the following file:\nlayouts/partials/custom/head-end.html\rCustom Layouts\rThe layouts of the theme can be overridden by creating a file with the same name in the layouts directory of your site. For example, to override the single.html layout for docs, create a file layouts/docs/single.html in your site.\nFor further information, refer to the Hugo Templates.\nFurther Customization\rDidn‚Äôt find what you were looking for? Feel free to open a discussion or make a contribution to the theme!"},"title":"Customization"},"/docs/advanced/multi-language/":{"data":{"":"","enable-multi-language#Enable Multi-language":"","manage-translations-by-filename#Manage Translations by Filename":"","read-more#Read More":"Hextra supports creating site with multiple languages using Hugo‚Äôs multilingual mode.\nEnable Multi-language\rTo make our site multi-language, we need to tell Hugo the supported languages. We need to add to the site configuration file:\nhugo.yamldefaultContentLanguage: en languages: en: languageName: English weight: 1 fr: languageName: Fran√ßais weight: 2 ja: languageName: Êó•Êú¨Ë™û weight: 3\rManage Translations by Filename\rHugo supports managing translations by filename. For example, if we have a file content/docs/_index.md in English, we can create a file content/docs/_index.fr.md for French translation.\ncontent\rdocs\r_index.md\r_index.fr.md\r_index.ja.md\rNote: Hugo also supports Translation by content directory.\nTranslate Menu Items\rTo translate menu items in the navigation bar, we need to set the identifier field:\nhugo.yamlmenu: main: - identifier: documentation name: Documentation pageRef: /docs weight: 1 - identifier: blog name: Blog pageRef: /blog weight: 2\rand translate them in the corresponding i18n file:\ni18n/fr.yamldocumentation: Documentation blog: Blog\rTranslate Strings\rTo translate strings on the other places, we need to add the translation to the corresponding i18n file:\ni18n/fr.yamlreadMore: Lire la suite\rA list of strings used in the theme can be found in the i18n/en.yaml file.\nRead More\rHugo Multilingual Mode Hugo Multilingual Part 1: Content translation Hugo Multilingual Part 2: Strings localization ","translate-menu-items#Translate Menu Items":"","translate-strings#Translate Strings":""},"title":"Multi-language"},"/docs/getting-started/":{"data":{"":"","next#Next":"Quick Start from Template\rimfing/hextra-starter-template\nYou could quickly get started by using the above template repository.\nWe have provided a GitHub Actions workflow which can help automatically build and deploy your site to GitHub Pages, and host it for free. For more options, check out Deploy Site.\nüåê Demo ‚Üó\nStart as New Project\rThere are two main ways to add the Hextra theme to your Hugo project:\nHugo Modules (Recommended): The simplest and recommended method. Hugo modules let you pull in the theme directly from its online source. Theme is downloaded automatically and managed by Hugo.\nGit Submodule: Alternatively, add Hextra as a Git Submodule. The theme is downloaded by Git and stored in your project‚Äôs themes folder.\nSetup Hextra as Hugo module\rPrerequisites\rBefore starting, you need to have the following software installed:\nHugo (extended version) Git Go Steps\rInitialize a new Hugo site\rhugo new site my-site --format=yaml\rConfigure Hextra theme via module\r# initialize hugo module cd my-site hugo mod init github.com/username/my-site # add Hextra theme hugo mod get github.com/imfing/hextra\rConfigure hugo.yaml to use Hextra theme by adding the following:\nmodule: imports: - path: github.com/imfing/hextra\rCreate your first content pages\rCreate new content page for the home page and the documentation page:\nhugo new content/_index.md hugo new content/docs/_index.md\rPreview the site locally\rhugo server --buildDrafts --disableFastRender\rVoila, your new site preview is available at http://localhost:1313/.\nHow to update theme?\rTo update all Hugo modules in your project to their latest versions, run the following command:\nhugo mod get -u\rTo update Hextra to the latest released version, run the following command:\nhugo mod get -u github.com/imfing/hextra\rSee Hugo Modules for more details.\nSetup Hextra as Git submodule\rPrerequisites\rBefore starting, you need to have the following software installed:\nHugo (extended version) Git Steps\rInitialize a new Hugo site\rhugo new site my-site --format=yaml\rAdd Hextra theme as a Git submodule\rgit submodule add https://github.com/imfing/hextra.git themes/hextra\rConfigure hugo.yaml to use Hextra theme by adding the following:\ntheme: hextra\rCreate your first content pages\rCreate new content page for the home page and the documentation page:\nhugo new content/_index.md hugo new content/docs/_index.md\rPreview the site locally\rhugo server --buildDrafts --disableFastRender\rYour new site preview is available at http://localhost:1313/.\nWhen using CI/CD for Hugo website deployment, it‚Äôs essential to ensure that the following command is executed before running the hugo command.\ngit submodule update --init\rFailure to run this command results in the theme folder not being populated with Hextra theme files, leading to a build failure.\nHow to update theme?\rTo update all submodules in your repository to their latest commits, run the following command:\ngit submodule update --remote\rTo update Hextra to the latest commit, run the following command:\ngit submodule update --remote themes/hextra\rSee Git submodules for more details.\nNext\rExplore the following sections to start adding more contents:\nOrganize Files\rConfiguration\rMarkdown","quick-start-from-template#Quick Start from Template":"","start-as-new-project#Start as New Project":""},"title":"Getting Started"},"/docs/guide/":{"data":{"":"Explore the following sections to learn how to use Hextra:\nOrganize Files\rConfiguration\rMarkdown\rSyntax Highlighting\rLaTeX\rDiagrams\rShortcodes\rDeploy Site"},"title":"Guide"},"/docs/guide/configuration/":{"data":{"":"","footer#Footer":"","navigation#Navigation":"","others#Others":"Hugo reads its configuration from hugo.yaml in the root of your Hugo site. The config file is where you can configure all aspects of your site. Check out the config file for this site exampleSite/hugo.yaml on GitHub to get a comprehensive idea of available settings and best practices.\nNavigation\rMenu\rTop right menu is defined under the menu.main section in the config file:\nhugo.yamlmenu: main: - name: Documentation pageRef: /docs weight: 1 - name: Blog pageRef: /blog weight: 2 - name: About pageRef: /about weight: 3 - name: Search weight: 4 params: type: search - name: GitHub weight: 5 url: \"https://github.com/imfing/hextra\" params: icon: github\rThere are different types of menu items:\nLink to a page in the site with pageRef - name: Documentation pageRef: /docs\rLink to an external URL with url - name: GitHub url: \"https://github.com\"\rSearch bar with type: search - name: Search params: type: search\rIcon - name: GitHub params: icon: github\rThese menu items can be sorted by setting the weight parameter.\nLogo and Title\rTo modify the default logo, edit hugo.yaml and add the path to your logo file under static directory. Optionally, you can change the link that users are redirected to when clicking on your logo, as well as set the width \u0026 height of the logo in pixels.\nhugo.yamlparams: navbar: displayTitle: true displayLogo: true logo: path: images/logo.svg dark: images/logo-dark.svg link: / width: 40 height: 20\rSidebar\rMain Sidebar\rFor the main sidebar, it is automatically generated from the structure of the content directory. See the Organize Files page for more details.\nTo exclude a single page from the left sidebar, set the sidebar.exclude parameter in the front matter of the page:\ncontent/docs/guide/configuration.md--- title: Configuration sidebar: exclude: true ---\rExtra Links\rSidebar extra links are defined under the menu.sidebar section in the config file:\nhugo.yamlmenu: sidebar: - name: More params: type: separator weight: 1 - name: \"About\" pageRef: \"/about\" weight: 2 - name: \"Hugo Docs ‚Üó\" url: \"https://gohugo.io/documentation/\" weight: 3\rRight Sidebar\rTable of Contents\rTable of contents is automatically generated from the headings in the content file. It can be disabled by setting toc: false in the front matter of the page.\ncontent/docs/guide/configuration.md--- title: Configuration toc: false ---\rPage Edit Link\rTo configure the page edit link, we can set the params.editURL.base parameter in the config file:\nhugo.yamlparams: editURL: enable: true base: \"https://github.com/your-username/your-repo/edit/main\"\rThe edit links will be automatically generated for each page based on the provided url as root directory. If you want to set edit link for a specific page, you can set the editURL parameter in the front matter of the page:\ncontent/docs/guide/configuration.md--- title: Configuration editURL: \"https://example.com/edit/this/page\" ---\rFooter\rCopyright\rTo modify the copyright text displayed in your website‚Äôs footer, you‚Äôll need to create a file named i18n/en.yaml. In this file, specify your new copyright text as shown below:\ni18n/en.yamlcopyright: \"¬© 2024 YOUR TEXT HERE\"\rFor your reference, an example i18n/en.yaml file can be found in the GitHub repository. Additionally, you could use Markdown format in the copyright text.\nOthers\rFavicon\rTo customize the favicon for your site, place icon files under the static folder to override the default favicons from the theme:\nstatic\randroid-chrome-192x192.png\randroid-chrome-512x512.png\rapple-touch-icon.png\rfavicon-16x16.png\rfavicon-32x32.png\rfavicon-dark.svg\rfavicon.ico\rfavicon.svg\rsite.webmanifest\rInclude both favicon.ico and favicon.svg files in your project to ensure your site‚Äôs favicons display correctly.\nWhile favicon.ico is generally for older browsers, favicon.svg is supported by modern ones. The optional favicon-dark.svg can be included for a tailored experience in dark mode. Feel free to use tools like favicon.io or favycon to generate these icons.\nTheme Configuration\rUse the theme setting to configure the default theme mode and toggle button, allowing visitors to switch between light or dark mode.\nhugo.yamlparams: theme: # light | dark | system default: system displayToggle: true\rOptions for theme.default:\nlight - always use light mode dark - always use dark mode system - sync with the operating system setting (default) The theme.displayToggle parameter allows you to display a toggle button for changing themes. When set to true, visitors can switch between light or dark mode, overriding the default setting.\nPage Width\rThe width of the page can be customized by the params.page.width parameter in the config file:\nhugo.yamlparams: page: # full (100%), wide (90rem), normal (1280px) width: wide\rThere are three available options: full, wide, and normal. By default, the page width is set to normal.\nSimilarly, the width of the navbar and footer can be customized by the params.navbar.width and params.footer.width parameters.\nSearch Index\rFull-text search powered by FlexSearch is enabled by default. To customize the search index, set the params.search.flexsearch.index parameter in the config file:\nhugo.yamlparams: # Search search: enable: true type: flexsearch flexsearch: # index page by: content | summary | heading | title index: content\rOptions for flexsearch.index:\ncontent - full content of the page (default) summary - summary of the page, see Hugo Content Summaries for more details heading - level 1 and level 2 headings title - only include the page title To customize the search tokenize, set the params.search.flexsearch.tokenize parameter in the config file:\nhugo.yamlparams: # ... flexsearch: # full | forward | reverse | strict tokenize: forward\rOptions for flexsearch.tokenize:\nstrict - index whole words forward - incrementally index words in forward direction reverse - incrementally index words in both directions full - index every possible combination To exclude a page from the search index, set the excludeSearch: true in the front matter of the page:\ncontent/docs/guide/configuration.md--- title: Configuration excludeSearch: true ---\rGoogle Analytics\rTo enable Google Analytics, set services.googleAnalytics.ID flag in hugo.yaml:\nhugo.yamlservices: googleAnalytics: ID: G-MEASUREMENT_ID","right-sidebar#Right Sidebar":"","sidebar#Sidebar":""},"title":"Configuration"},"/docs/guide/deploy-site/":{"data":{"":"","cloudflare-pages#Cloudflare Pages":"","github-pages#GitHub Pages":"","netlify#Netlify":"","vercel#Vercel":"Hugo generates static websites, allowing for flexible hosting options. This page provides guides for deploying your Hextra site on various platforms.\nGitHub Pages\rGitHub Pages is the recommended way to deploy and host your website for free.\nIf you bootstrap the site using hextra-starter-template, it has provided GitHub Actions workflow out-of-the-box that helps automatically deploy to GitHub Pages.\nGitHub Actions Configuration\rBelow is an example configuration from hextra-starter-template:\n.github/workflows/pages.yaml# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: [\"main\"] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \"pages\" cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.121.2 steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 # fetch all history for .GitInfo and .Lastmod submodules: recursive - name: Setup Go uses: actions/setup-go@v5 with: go-version: '1.21' - name: Setup Pages id: pages uses: actions/configure-pages@v4 - name: Setup Hugo run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026\u0026 sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc --minify \\ --baseURL \"${{ steps.pages.outputs.base_url }}/\" - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4\rIn your repository settings, set the Pages \u003e Build and deployment \u003e Source to GitHub Actions: By default, the above GitHub Actions workflow .github/workflows/pages.yaml assumes that the site is deploying to https://\u003cUSERNAME\u003e.github.io/\u003cREPO\u003e/.\nIf you are deploying to https://\u003cUSERNAME\u003e.github.io/ then modify the --baseURL:\n.github/workflows/pages.yaml 54 55 56 57 run: | hugo \\ --gc --minify \\ --baseURL \"https://${{ github.repository_owner }}.github.io/\" If you are deploying to your own domain, please change the --baseURL value accordingly.\nCloudflare Pages\rPut your site source code in a Git repository (e.g. GitHub) Log in to the Cloudflare dashboard and select your account In Account Home, select Workers \u0026 Pages \u003e Create application \u003e Pages \u003e Connect to Git Select the repository, and in the Set up builds and deployments section, provide the following information: Configuration Value Production branch main Build command hugo --gc --minify Build directory public For more details, check out:\nDeploy a Hugo site. Language support and tools. Netlify\rPush your code to your Git repository (GitHub, GitLab, etc.) Import the project to Netlify If you are not using [hextra-starter-template][hextra-starter-template], configure the following manually: Configure the Build command to hugo --gc --minify Specify the Publish directory to public Add Environment variable HUGO_VERSION and set to 0.119.0 Deploy! Check Hugo on Netlify for more details.\nVercel\rPush your code to your Git repository (GitHub, GitLab, etc.) Go to Vercel Dashboard and import your Hugo project Configure the project, select Hugo as Framework Preset Override the Build Command and Install command: Set Build Command to hugo --gc --minify Set Install Command to yum install golang "},"title":"Deploy Site"},"/docs/guide/diagrams/":{"data":{"":"","mermaid#Mermaid":"Currently, Hextra supports Mermaid for diagrams.\nMermaid\rMermaid is a JavaScript based diagramming and charting tool that takes Markdown-inspired text definitions and creates diagrams dynamically in the browser. For example, Mermaid can render flow charts, sequence diagrams, pie charts and more.\nUsing Mermaid in Hextra is as simple as writing a code block with language set mermaid:\n```mermaid graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ```\rwill be rendered as:\ngraph TD;\rA--\u003eB;\rA--\u003eC;\rB--\u003eD;\rC--\u003eD;Sequence diagram:\nsequenceDiagram\rparticipant Alice\rparticipant Bob\rAlice-\u003e\u003eJohn: Hello John, how are you?\rloop Healthcheck\rJohn-\u003e\u003eJohn: Fight against hypochondria\rend\rNote right of John: Rational thoughts prevail!\rJohn--\u003e\u003eAlice: Great!\rJohn-\u003e\u003eBob: How about you?\rBob--\u003e\u003eJohn: Jolly good!For more information, please refer to Mermaid Documentation."},"title":"Diagrams"},"/docs/guide/latex/":{"data":{"":"","chemistry#Chemistry":"$\\KaTeX$ is used for rendering LaTeX math expressions. It can be enabled per page by setting math to true in the page front matter.\nMarkdown--- title: \"My Page with LaTeX\" math: true ---\rWhen enabled, the scripts, stylesheets and fonts from KaTeX will be included automatically in your site. You can start using LaTeX math expressions in your Markdown content.\nExample\rBoth inline and separate paragraph LaTeX math expressions are supported in the Markdown content.\nInline\rpage.mdThis $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ is inline.\rThis $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ is inline.\nSeparate Paragraph\rpage.md$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dt$$\rwill be rendered as:\n$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} , dt$$\nSupported Functions\rFor a list of supported functions, see KaTeX supported functions.\nChemistry\rChemistry expressions are supported via mhchem extension.\nInline: $\\ce{H2O}$ is water.\nSeparate paragraph:\npage.md$$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$\r$$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$","example#Example":"","supported-functions#Supported Functions":""},"title":"LaTeX"},"/docs/guide/markdown/":{"data":{"":"","configuration#Configuration":"","learning-resources#Learning Resources":"Hugo supports Markdown syntax for formatting text, creating lists, and more. This page will show you some of the most common Markdown syntax examples.\nMarkdown Examples\rStyling Text\rStyle Syntax Example Output Bold **bold text** **bold text** bold text Italic *italicized text* *italicized text* italicized text Strikethrough ~~strikethrough text~~ ~~strikethrough text~~ strikethrough text Subscript \u003csub\u003e\u003c/sub\u003e This is a \u003csub\u003esubscript\u003c/sub\u003e text This is a subscript text Superscript \u003csup\u003e\u003c/sup\u003e This is a \u003csup\u003esuperscript\u003c/sup\u003e text This is a superscript text Blockquotes\rBlockquote with attribution\nDon‚Äôt communicate by sharing memory, share memory by communicating.\n‚Äî Rob Pike1\nTables\rTables aren‚Äôt part of the core Markdown spec, but Hugo supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables\rItalics Bold Code italics bold code Code Blocks\rSyntax Highlighting\rLists\rOrdered List\rFirst item Second item Third item Unordered List\rList item Another item And another item Nested list\rFruit Apple Orange Banana Dairy Milk Cheese Images\rWith caption:\nUnsplash Landscape\rConfiguration\rHugo uses Goldmark for Markdown parsing. Markdown rendering can be configured in hugo.yaml under markup.goldmark. Below is the default configuration for Hextra:\nhugo.yamlmarkup: goldmark: renderer: unsafe: true highlight: noClasses: false\rFor more configuration options, see Hugo documentation on Configure Markup.\nLearning Resources\rMarkdown Guide Markdown Cheatsheet Markdown Tutorial Markdown Reference The above quote is excerpted from Rob Pike‚Äôs talk during Gopherfest, November 18, 2015.¬†‚Ü©Ô∏é","markdown-examples#Markdown Examples":""},"title":"Markdown"},"/docs/guide/organize-files/":{"data":{"":"","add-images#Add Images":"Directory Structure\rBy default, Hugo searches for Markdown files in the content directory, and the structure of the directory determines the final output structure of your website. Take this site as an example:\ncontent\r_index.md\rdocs\r_index.md\rgetting-started.md\rguide\r_index.md\rorganize-files.md\rblog\r_index.md\rpost-1.md\rEach of the _index.md files is the index page for the corresponding section. The other Markdown files are regular pages.\ncontent\r‚îú‚îÄ‚îÄ _index.md // \u003c- /\r‚îú‚îÄ‚îÄ docs\r‚îÇ ‚îú‚îÄ‚îÄ _index.md // \u003c- /docs/\r‚îÇ ‚îú‚îÄ‚îÄ getting-started.md // \u003c- /docs/getting-started/\r‚îÇ ‚îî‚îÄ‚îÄ guide\r‚îÇ ‚îú‚îÄ‚îÄ _index.md // \u003c- /docs/guide/\r‚îÇ ‚îî‚îÄ‚îÄ organize-files.md // \u003c- /docs/guide/organize-files/\r‚îî‚îÄ‚îÄ blog\r‚îú‚îÄ‚îÄ _index.md // \u003c- /blog/\r‚îî‚îÄ‚îÄ post-1.md // \u003c- /blog/post-1/\rLayouts\rHextra offers three layouts for different content types:\nLayout Directory Features docs content/docs/ Ideal for structured documentation, same as this section. blog content/blog/ For blog postings, with both listing and detailed article views. default All other directories Single-page article view without sidebar. To customize a section to mirror the behavior of a built-in layout, specify the desired type in the front matter of the section‚Äôs _index.md.\ncontent/my-docs/_index.md--- title: My Docs cascade: type: docs ---\rThe above example configuration ensures that the content files inside content/my-docs/ will be treated as documentation (docs type) by default.\nSidebar Navigation\rThe sidebar navigation is generated automatically based on the content organization alphabetically. To manually configure the sidebar order, we can use the weight parameter in the front matter of the Markdown files.\ncontent/docs/guide/_index.md--- title: Guide weight: 2 ---\r‚ÑπÔ∏è\rIt is recommended to keep the sidebar not too deep. If you have a lot of content, consider splitting them into multiple sections.\rBreadcrumb Navigation\rBreadcrumbs are auto-generated based on the directory structure of /content.\nFor example, consider the file structure demonstrated above. Given that structure, the breadcrumbs atop the page at /docs/guide/organize-files/ would appear automatically as follows:\nDocumentation \u003e Guide \u003e Organize Files\rCustomizing Breadcrumb Link Titles\rBy default, each breadcrumb link is generated based on that page‚Äôs title parameter. You can customize this by specifying a linkTitle.\nFor example, if instead of Organize Files we wanted the breadcrumb to be Foo Bar:\ncontent/docs/guide/organize-files.md--- linkTitle: Foo Bar title: Organize Files ---\rThis would now generate the following breadcrumbs:\nDocumentation \u003e Guide \u003e Foo Bar\rHiding Breadcrumbs\rYou can hide breadcrumbs completely from a page by specfying breadcrumbs: false in its front matter:\ncontent/docs/guide/organize-files.md--- breadcrumbs: false title: Organize Files ---\rConfigure Content Directory\rBy default, the root content/ directory is used by Hugo to build the site. If you need to use a different directory for content, for example docs/, this can be done by setting the contentDir parameter in the site configuration hugo.yaml.\nAdd Images\rTo add images, the easiest way is to put the image files in the same directory as the Markdown file. For example, add an image file image.png alongside the my-page.md file:\ncontent\rdocs\rmy-page.md\rimage.png\rThen, we can use the following Markdown syntax to add the image to the content:\ncontent/docs/my-page.md![](image.png)\rWe can also utilize the page bundles feature of Hugo to organize the image files together with the Markdown file. To achieve that, turn the my-page.md file into a directory my-page and put the content into a file named index.md, and put the image files inside the my-page directory:\ncontent\rdocs\rmy-page\rindex.md\rimage.png\rcontent/docs/my-page/index.md![](image.png)\rAlternatively, we can also put the image files in the static directory, which will make the images available for all pages:\nstatic\rimages\rimage.png\rcontent\rdocs\rmy-page.md\rNote that the image path begins with a slash / and is relative to the static directory:\ncontent/docs/my-page.md![](/images/image.png)","breadcrumb-navigation#Breadcrumb Navigation":"","configure-content-directory#Configure Content Directory":"","directory-structure#Directory Structure":"","layouts#Layouts":"","sidebar-navigation#Sidebar Navigation":""},"title":"Organize Files"},"/docs/guide/shortcodes/":{"data":{"":"Hugo Shortcodes are simple snippets inside your content files calling built-in or custom templates.\nHextra provides a collection of beautiful shortcodes to enhance your content.\nCallout\rCards\rDetails\rFileTree\rIcon\rSteps\rTabs"},"title":"Shortcodes"},"/docs/guide/shortcodes/callout/":{"data":{"":"","example#Example":"","usage#Usage":"A built-in component to show important information to the reader.\nExample\rüëæ\rA callout is a short piece of text intended to attract attention.\r‚ÑπÔ∏è\rA callout is a short piece of text intended to attract attention.\r‚ö†Ô∏è\rA callout is a short piece of text intended to attract attention.\rüö´\rA callout is a short piece of text intended to attract attention.\rUsage\rDefault\rüåê\rHugo can be used to create a wide variety of websites, including blogs, portfolios, documentation sites, and more.\r{{\u003c callout emoji=\"üåê\" \u003e}} Hugo can be used to create a wide variety of websites, including blogs, portfolios, documentation sites, and more. {{\u003c /callout \u003e}}\rInfo\r‚ÑπÔ∏è\rPlease visit GitHub to see the latest releases.\r{{\u003c callout type=\"info\" \u003e}} Please visit GitHub to see the latest releases. {{\u003c /callout \u003e}}\rWarning\r‚ö†Ô∏è\rThis API will be deprecated in the next version.\r{{\u003c callout type=\"warning\" \u003e}} A **callout** is a short piece of text intended to attract attention. {{\u003c /callout \u003e}}\rError\rüö´\rSomething went wrong and it‚Äôs going to explode.\r{{\u003c callout type=\"error\" \u003e}} Something went wrong and it's going to explode. {{\u003c /callout \u003e}}"},"title":"Callout"},"/docs/guide/shortcodes/cards/":{"data":{"":"","card-parameters#Card Parameters":"","example#Example":"","image-card#Image Card":"Example\rCallout\rNo Icon\rImage CardUnsplash Landscape\rLocal ImageRaw image under static directory.\rLocal ImageImage under assets directory, processed by Hugo.\rUsage\r{{\u003c cards \u003e}}\r{{\u003c card link=\"../callout\" title=\"Callout\" icon=\"warning\" \u003e}}\r{{\u003c card link=\"/\" title=\"No Icon\" \u003e}}\r{{\u003c /cards \u003e}}\r{{\u003c cards \u003e}}\r{{\u003c card link=\"/\" title=\"Image Card\" image=\"https://source.unsplash.com/featured/800x600?landscape\" subtitle=\"Unsplash Landscape\" \u003e}}\r{{\u003c card link=\"/\" title=\"Local Image\" image=\"/images/card-image-unprocessed.jpg\" subtitle=\"Raw image under static directory.\" \u003e}}\r{{\u003c card link=\"/\" title=\"Local Image\" image=\"images/space.jpg\" subtitle=\"Image under assets directory, processed by Hugo.\" method=\"Resize\" options=\"600x q80 webp\" \u003e}}\r{{\u003c /cards \u003e}}\rCard Parameters\rParameter Description link URL (internal or external). title Title heading for the card. subtitle Subtitle heading (supports Markdown). icon Name of the icon. Image Card\rAdditionally, the card supports adding image and processing through these parameters:\nParameter Description image Specifies the image URL for the card. method Sets Hugo‚Äôs image processing method. options Configures Hugo‚Äôs image processing options. Card supports three kinds of images:\nRemote image: the full URL in the image parameter. Static image: use the relative path in Hugo‚Äôs static/ directory. Processed image: use the relative path in Hugo‚Äôs assets/ directory. Hextra auto-detects if image processing is needed during build and applies the options parameter or default settings (Resize, 800x, Quality 80, WebP Format). It currently supports these method: Resize, Fit, Fill and Crop.\nFor more on Hugo‚Äôs built in image processing commands, methods, and options see their Image Processing Documentation.","usage#Usage":""},"title":"Cards"},"/docs/guide/shortcodes/details/":{"data":{"":"","example#Example":"","usage#Usage":"A built-in component to display a collapsible content.\nExample\rDetails\rThis is the content of the details.\nMarkdown is supported.\nClick me to reveal\rThis will be hidden by default.\rUsage\r{{% details title=\"Details\" %}} This is the content of the details. Markdown is **supported**. {{% /details %}}\r{{% details title=\"Click me to reveal\" closed=\"true\" %}} This will be hidden by default. {{% /details %}}"},"title":"Details"},"/docs/guide/shortcodes/filetree/":{"data":{"":"","example#Example":"","usage#Usage":"Example\rcontent\r_index.md\rdocs\r_index.md\rintroduction.md\rintroduction.fr.md\rhugo.toml\rUsage\rMarkdown{{\u003c filetree/container \u003e}} {{\u003c filetree/folder name=\"content\" \u003e}} {{\u003c filetree/file name=\"_index.md\" \u003e}} {{\u003c filetree/folder name=\"docs\" state=\"closed\" \u003e}} {{\u003c filetree/file name=\"_index.md\" \u003e}} {{\u003c filetree/file name=\"introduction.md\" \u003e}} {{\u003c filetree/file name=\"introduction.fr.md\" \u003e}} {{\u003c /filetree/folder \u003e}} {{\u003c /filetree/folder \u003e}} {{\u003c filetree/file name=\"hugo.toml\" \u003e}} {{\u003c /filetree/container \u003e}}"},"title":"FileTree"},"/docs/guide/shortcodes/icon/":{"data":{"":"","example#Example":"","usage#Usage":"To use this shortcode inline, inline shortcode needs to be enabled in the config:\nhugo.yamlenableInlineShortcodes: true\rList of available icons can be found in data/icons.yaml.\nExample\rUsage\r{{\u003c icon \"github\" \u003e}}\rHeroicons v1 outline icons are available out of the box.\nHow to add your own icons\rCreate data/icons.yaml file, then add your own SVG icons in the following format:\ndata/icons.yamlyour-icon: \u003csvg\u003eyour icon svg content\u003c/svg\u003e\rIt then can be used in the shortcode like this:\n{{\u003c icon \"your-icon\" \u003e}}\r{{\u003c card icon=\"your-icon\" \u003e}}\rTip: Iconify Design is a great place to find SVG icons for your site."},"title":"Icon"},"/docs/guide/shortcodes/steps/":{"data":{"":"","example#Example":"","usage#Usage":"A built-in component to display a series of steps.\nExample\rStep 1\rThis is the first step.\nStep 2\rThis is the second step.\nStep 3\rThis is the third step.\nUsage\rPut Markdown h3 header within steps shortcode.\n{{% steps %}}\r### Step 1\rThis is the first step.\r### Step 2\rThis is the second step.\r{{% /steps %}}"},"title":"Steps"},"/docs/guide/shortcodes/tabs/":{"data":{"":"","example#Example":"","usage#Usage":"Example\rJSONYAMLTOML\rJSON: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.\rYAML: YAML is a human-readable data serialization language.\rTOML: TOML aims to be a minimal configuration file format that‚Äôs easy to read due to obvious semantics.\rUsage\rDefault\r{{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}}\r{{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.{{\u003c /tab \u003e}}\r{{\u003c tab \u003e}}**YAML**: YAML is a human-readable data serialization language.{{\u003c /tab \u003e}}\r{{\u003c tab \u003e}}**TOML**: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.{{\u003c /tab \u003e}}\r{{\u003c /tabs \u003e}}\rSpecify Selected Index\rUse defaultIndex property to specify the selected tab. The index starts from 0.\n{{\u003c tabs items=\"JSON,YAML,TOML\" defaultIndex=\"1\" \u003e}}\r{{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.{{\u003c /tab \u003e}}\r{{\u003c tab \u003e}}**YAML**: YAML is a human-readable data serialization language.{{\u003c /tab \u003e}}\r{{\u003c tab \u003e}}**TOML**: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.{{\u003c /tab \u003e}}\r{{\u003c /tabs \u003e}}\rThe YAML tab will be selected by default.\nJSONYAMLTOML\rJSON: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.\rYAML: YAML is a human-readable data serialization language.\rTOML: TOML aims to be a minimal configuration file format that‚Äôs easy to read due to obvious semantics.\rUse Markdown\rMarkdown syntax including code block is also supported:\n{{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}}\r{{\u003c tab \u003e}}\r```json\r{ \"hello\": \"world\" }\r```\r{{\u003c /tab \u003e}}\r... add other tabs similarly\r{{\u003c /tabs \u003e}}\rJSONYAMLTOML\r{ \"hello\": \"world\" }\rhello: world\rhello = \"world\""},"title":"Tabs"},"/docs/guide/syntax-highlighting/":{"data":{"":"","features#Features":"","supported-languages#Supported Languages":"Hugo uses Chroma, a general purpose syntax highlighter in pure Go, for syntax highlighting. It is recommended to use backticks for code blocks in Markdown content. For example:\nMarkdown```python def say_hello(): print(\"Hello!\") ```\rwill be rendered as:\ndef say_hello(): print(\"Hello!\")\rFeatures\rFilename\rTo add a filename or title to the code block, set attribute filename:\nMarkdown```python {filename=\"hello.py\"} def say_hello(): print(\"Hello!\") ```\rhello.pydef say_hello(): print(\"Hello!\")\rLine Numbers\rTo set line numbers, set attribute linenos to table and optionally set linenostart to the starting line number:\nMarkdown```python {linenos=table,linenostart=42} def say_hello(): print(\"Hello!\") ```\r42 43 def say_hello(): print(\"Hello!\") Highlighting Lines\rTo highlight lines, set attribute hl_lines to a list of line numbers:\nMarkdown```python {linenos=table,hl_lines=[2,4],linenostart=1,filename=\"hello.py\"} def say_hello(): print(\"Hello!\") def main(): say_hello() ```\rhello.py 1 2 3 4 5 def say_hello(): print(\"Hello!\") def main(): say_hello() Copy Button\rBy default, copy button is enabled for code blocks. Its behavior can changed by modifying the site configuration file:\nhugo.yaml 42 43 44 45 46 47 params: highlight: copy: enable: true # hover | always display: hover Supported Languages\rFor a list of supported languages, please see the Chroma documentation."},"title":"Syntax Highlighting"},"/showcase/":{"data":{"":"\rProjects powered by JimmyRespawn\rMusicloud\rSticky Noter\rLetter Counter\rStage1st\rTGFC"},"title":"Showcase"}}